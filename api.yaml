swagger: "2.0"
info:
  description: "  "
  version: "1.0.1"
  title: "Blog for service computing"
  termsOfService: "https://github.com/ServiceComputingTeam"
  contact: 
    email: "895118352@qq.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: "users"
  description: "A person who uses the program"
- name: "blogs"
  description: "Articles published by users"
- name: "labels"
  description: "Classification of articles"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
        - "users"
      summary: "Create a new user"
      operationId: "createUser"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Create sucessfully"
        400:
          description: "Invalid username/password supplied"
    patch:
      tags: 
        - "users"
      summary: "Update user"
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated user"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Bad request"
  /user/login:
    get:
      tags:
        - "users"
      summary: "Logs user into the system"
      operationId: "userLogin"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "Login successfully"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
  /user/blogs:
    post:
      tags:
        - "users"
      summary: "Publish a new blog"
      operationId: "publishBlog"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created blog"
        required: true
        schema:
          $ref: "#/definitions/Blog"
      responses:
        201:
          description: "Publish a new blog successfully"
        400:
          description: "Invalid title"
    get:
      tags: 
        - "users"
      summary: "Get blogs by user login"
      operationId: "getBlogByUser"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        200:
          description: "Get blogs successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Blog"
        400:
          description: "Bad request"
        404:
          description: "User not found" 
  /users/{username}/blogs:
    get:
      tags: 
        - "users"
      summary: "Get blogs by user"
      operationId: "getBlogByUsername"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Get user"
        required: true
        type: "string"
      responses:
        200:
          description: "Get blogs successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Blog"
        400:
          description: "Bad request"
        404:
          description: "User not found" 
  /blogs:
    get:
      tags: 
        - "blogs"
      summary: "Get all blogs"
      operationId: "getALLBlog"
      produces:
        - "application/xml"
        - "application/json"
      responses:
        200:
          description: "Get blogs successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Blog"
        400:
          description: "Bad request"
  /blogs/{username}/{title}:
    get:
      tags: 
        - "blogs"
      summary: "Get blog by title"
      operationId: "getBlogByTitle"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Get user"
        required: true
        type: "string"
      - in: "path"
        name: "title"
        description: "Get blog"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Blog"
        400:
          description: "Invalid title supplied"
        404:
          description: "Blog not found"
  /blogs/{username}/{title}/reviews:
    post:
      tags: 
        - "blogs"
      summary: "Comment on a blog"
      operationId: "review"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Get user"
        required: true
        type: "string"
      - in: "path"
        name: "title"
        description: "Get blog"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Review"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        201:
          description: "Review successfully"
        400:
          description: "Bad request"
    get:
      tags: 
        - "blogs"
      summary: "Get comment by a blog"
      operationId: "getReviewByBlog"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Get user"
        required: true
        type: "string"
      - in: "path"
        name: "title"
        description: "Get blog"
        required: true
        type: "string"
      responses:
        200:
          description: "Get review successfully"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Bad request"
  /labels/{labelname}/blogs:
    get:
      tags: 
        - "labels"
      summary: "Get blog by label"
      operationId: "getBlogByLabel"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
      - name: "labelname"
        in: "path"
        description: "Get label"
        required: true
        type: "string"
      responses:
        200:
          description: "Get blog by label successfully"
          schema:
            $ref: "#/definitions/Label"
        400:
          description: "Invalid labelname supplied"
        404:
          description: "Label not found"        
  
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      blog:
        type: "array"
        items: 
          $ref: "#/definitions/Blog"
      phone:
        type: "string"
  Blog:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      content:
        type: "string"
      review:
        type: "array"
        items:
          $ref: "#/definitions/Review"
      label:
        type: "array"
        items:
          type: "string"
      owner:
        type: "string"
      createtime:
        type: "string"
        format: "date-time"
  Label:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      labelname:
        type: "string"
      blog:
        type: "array"
        items: 
          $ref: "#/definitions/Blog"
  Review:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "string"
      blogtitle:
        type: "string"
      blogowner:
        type: "string"
      reviewer:
        type: "string"
      createtime:
        type: "string"
        format: "date-time"
  
        
